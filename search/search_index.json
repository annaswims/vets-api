{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vets API \u00b6 This project provides common APIs for applications that live on VA.gov (formerly vets.gov APIs). Build Status VA.gov Platform Documentation API Docs For frontend, see vets-website and vets-content repos. Base setup \u00b6 Clone the vets-api repo: 1 git clone https://github.com/department-of-veterans-affairs/vets-api.git Setup key & cert for localhost authentication to ID.me: Create a folder in your vets-api directory: 1 2 3 mkdir config/certs touch config/certs/vetsgov-localhost.crt touch config/certs/vetsgov-localhost.key Copy example configuration file: 1 cp config/settings.local.yml.example config/settings.local.yml Edit config/settings.local.yml to disable signed authentication requests: 1 2 3 # settings.local.yml saml : authn_requests_signed : false If you are developing features that need Sidekiq Enterprise, you must have access to the va.gov-team-sensitive repo and install the sidekiq enterprise license Sidekiq Enterprise is used for worker rate limiting and additional reliability in production and requires a license be configured on your development machine. If you do not have a license configured, the open source version of Sidekiq will be installed instead. This is not an issue unless you are specifically developing features that need Sidekiq Enterprise. DO NOT commit local Gemfile modifications that remove the sidekiq-ent and sidekiq-pro gems. Developers who work with vets-api daily tend to prefer the native setup because they don't have to deal with the abstraction of docker-compose while those who would to spend less time on getting started prefer the docker setup. Docker is also useful when it's necessary to have a setup as close to production as possible. Finally, it's possible to use a hybrid setup where you run vets-api natively, but run the Postgres and Redis dependencies in docker. Native setup (OSX/Ubuntu) Docker setup Hybrid setup Running the app \u00b6 Running natively Running with Docker Debugging on Docker Configuration \u00b6 Vets API is configured with Config . The default configuration is contained in settings.yml . To customize your setup, you can create a config/settings.local.yml file with configuration specific to your needs. For example, to configure Redis and PostgreSQL (PostGIS is required), place something like this in that file: 1 2 3 4 5 database_url : postgis://pg_host:9999/custom_db redis : host : redis_host port : 9999 This is also where you will place any other customizations, such as API tokens or certificate paths. Config settings that vary in value depending on the deployment environment will also need to be set appropriately for each environment in the relevant devops (Private Repo) configurations (dev-, staging-, and prod-settings.local.yml.j2). Some examples of configuration that will need to be added to these files are: API keys/tokens 3 rd party service hostnames, ports, and certificates/keys. Betamocks settings Optional application configuration \u00b6 The following features require additional configuration, click for details. Education Benefits EVSS Facilities Locator Local Network Access Mailers Master Person Index (MPI) My HealtheVet (MHV) Virtual Machine Access Test User Dashboard To mock one or more of the above services see Betamocks Vets API will still run in a limited capacity without configuring any of these features, and will run the unit tests successfully. Deployment instructions \u00b6 Jenkins deploys vets-api upon each merge to master : http://jenkins.vfs.va.gov/job/testing/job/vets-api/job/master/ Each deploy is available here: https://dev-api.va.gov/v0/status Additional deployment details can be found here: additional deployment details API request key formatting \u00b6 When sending HTTP requests use the X-Key-Inflection request header to specify which case your client wants to use. Valid cases are camel , dash , and snake . For example if you set X-Key-Inflection: camel then you can use camelCase keys in your JSON request body and you will get back data with camelCase keys in the response body. If the header is not provided then the server will expect snake_case keys in the request body and output snake_case in the response. Versions \u00b6 The version of Ruby and gem dependencies (including Rails) used are defined in the included Gemfile . The currently used versions of gems are maintained with Bundler and stored in the Gemfile.lock . Version Policy \u00b6 The goal is to have vets-api use supported versions of gems and Ruby, which is often the latest. However the versions are generally updated as need or availability arise. If you need a newer version of a gem, please submit a pull-request marked as draft with just the gem updated and passing tests.","title":"Vets API"},{"location":"#vets-api","text":"This project provides common APIs for applications that live on VA.gov (formerly vets.gov APIs). Build Status VA.gov Platform Documentation API Docs For frontend, see vets-website and vets-content repos.","title":"Vets API"},{"location":"#base-setup","text":"Clone the vets-api repo: 1 git clone https://github.com/department-of-veterans-affairs/vets-api.git Setup key & cert for localhost authentication to ID.me: Create a folder in your vets-api directory: 1 2 3 mkdir config/certs touch config/certs/vetsgov-localhost.crt touch config/certs/vetsgov-localhost.key Copy example configuration file: 1 cp config/settings.local.yml.example config/settings.local.yml Edit config/settings.local.yml to disable signed authentication requests: 1 2 3 # settings.local.yml saml : authn_requests_signed : false If you are developing features that need Sidekiq Enterprise, you must have access to the va.gov-team-sensitive repo and install the sidekiq enterprise license Sidekiq Enterprise is used for worker rate limiting and additional reliability in production and requires a license be configured on your development machine. If you do not have a license configured, the open source version of Sidekiq will be installed instead. This is not an issue unless you are specifically developing features that need Sidekiq Enterprise. DO NOT commit local Gemfile modifications that remove the sidekiq-ent and sidekiq-pro gems. Developers who work with vets-api daily tend to prefer the native setup because they don't have to deal with the abstraction of docker-compose while those who would to spend less time on getting started prefer the docker setup. Docker is also useful when it's necessary to have a setup as close to production as possible. Finally, it's possible to use a hybrid setup where you run vets-api natively, but run the Postgres and Redis dependencies in docker. Native setup (OSX/Ubuntu) Docker setup Hybrid setup","title":"Base setup"},{"location":"#running-the-app","text":"Running natively Running with Docker Debugging on Docker","title":"Running the app"},{"location":"#configuration","text":"Vets API is configured with Config . The default configuration is contained in settings.yml . To customize your setup, you can create a config/settings.local.yml file with configuration specific to your needs. For example, to configure Redis and PostgreSQL (PostGIS is required), place something like this in that file: 1 2 3 4 5 database_url : postgis://pg_host:9999/custom_db redis : host : redis_host port : 9999 This is also where you will place any other customizations, such as API tokens or certificate paths. Config settings that vary in value depending on the deployment environment will also need to be set appropriately for each environment in the relevant devops (Private Repo) configurations (dev-, staging-, and prod-settings.local.yml.j2). Some examples of configuration that will need to be added to these files are: API keys/tokens 3 rd party service hostnames, ports, and certificates/keys. Betamocks settings","title":"Configuration"},{"location":"#optional-application-configuration","text":"The following features require additional configuration, click for details. Education Benefits EVSS Facilities Locator Local Network Access Mailers Master Person Index (MPI) My HealtheVet (MHV) Virtual Machine Access Test User Dashboard To mock one or more of the above services see Betamocks Vets API will still run in a limited capacity without configuring any of these features, and will run the unit tests successfully.","title":"Optional application configuration"},{"location":"#deployment-instructions","text":"Jenkins deploys vets-api upon each merge to master : http://jenkins.vfs.va.gov/job/testing/job/vets-api/job/master/ Each deploy is available here: https://dev-api.va.gov/v0/status Additional deployment details can be found here: additional deployment details","title":"Deployment instructions"},{"location":"#api-request-key-formatting","text":"When sending HTTP requests use the X-Key-Inflection request header to specify which case your client wants to use. Valid cases are camel , dash , and snake . For example if you set X-Key-Inflection: camel then you can use camelCase keys in your JSON request body and you will get back data with camelCase keys in the response body. If the header is not provided then the server will expect snake_case keys in the request body and output snake_case in the response.","title":"API request key formatting"},{"location":"#versions","text":"The version of Ruby and gem dependencies (including Rails) used are defined in the included Gemfile . The currently used versions of gems are maintained with Bundler and stored in the Gemfile.lock .","title":"Versions"},{"location":"#version-policy","text":"The goal is to have vets-api use supported versions of gems and Ruby, which is often the latest. However the versions are generally updated as need or availability arise. If you need a newer version of a gem, please submit a pull-request marked as draft with just the gem updated and passing tests.","title":"Version Policy"},{"location":"HISTORY/","text":"vets-api endpoint removal/deprecation history \u00b6 This document tracks removal and deprecation of API resources and other functionality in vets-api. Additive changes are easy to trace through commit history, but functionality that is removed may be hard to discover and trace in the future if developers don't know it existed in the first place. Include an entry in this file in the same pull request as that in which the API resource is removed or deprecated. That way the commit history of this file is tied to the commits in which changes were made. Template: Removed Resource Name \u00b6 Deprecation Date: Removal Date: Rationale: /v0/beta_registrations \u00b6 Removal Date: 5/4/2022 Rationale: The beta_registrations endpoint allowed users to selectively register for beta features. It has not been used since 2019, and is largely obsoleted by the use of feature flipper. /v0/vic/{profile_photo_attachments,supporting_documentation_attachments} \u00b6 Removal Date: 5/2/2022 Rationale: The vic/* endpoints were implemented as part of a proposed \"VICv2\" feature that was never launched to production. The associated frontend code is already moved, and Veteran ID Card (VIC) functionality is implemented on a non-VA.gov site. /v0/vso_appointments \u00b6 Removal Date: 4/28/2022 Rationale: vso_appointments endpoint was built as part of a platform pilot in 2018, and never launched to production. Related models and service code in lib/vso_pdf was exclusive to this API and is also being removed.","title":"History"},{"location":"HISTORY/#vets-api-endpoint-removaldeprecation-history","text":"This document tracks removal and deprecation of API resources and other functionality in vets-api. Additive changes are easy to trace through commit history, but functionality that is removed may be hard to discover and trace in the future if developers don't know it existed in the first place. Include an entry in this file in the same pull request as that in which the API resource is removed or deprecated. That way the commit history of this file is tied to the commits in which changes were made. Template:","title":"vets-api endpoint removal/deprecation history"},{"location":"HISTORY/#removed-resource-name","text":"Deprecation Date: Removal Date: Rationale:","title":"Removed Resource Name"},{"location":"HISTORY/#v0beta_registrations","text":"Removal Date: 5/4/2022 Rationale: The beta_registrations endpoint allowed users to selectively register for beta features. It has not been used since 2019, and is largely obsoleted by the use of feature flipper.","title":"/v0/beta_registrations"},{"location":"HISTORY/#v0vicprofile_photo_attachmentssupporting_documentation_attachments","text":"Removal Date: 5/2/2022 Rationale: The vic/* endpoints were implemented as part of a proposed \"VICv2\" feature that was never launched to production. The associated frontend code is already moved, and Veteran ID Card (VIC) functionality is implemented on a non-VA.gov site.","title":"/v0/vic/{profile_photo_attachments,supporting_documentation_attachments}"},{"location":"HISTORY/#v0vso_appointments","text":"Removal Date: 4/28/2022 Rationale: vso_appointments endpoint was built as part of a platform pilot in 2018, and never launched to production. Related models and service code in lib/vso_pdf was exclusive to this API and is also being removed.","title":"/v0/vso_appointments"},{"location":"deployment/information/","text":"Deployment Information \u00b6 When merged pr is deployed to various environments \u00b6 Merged work is automatically deployed to all environments. Below details at what point in the process these auto-deployments will occur. dev + staging + sandbox = immediately after code is merged and passes ci production = once a day at 1pm CT Additional manual work \u00b6 Specific Jenkins builds are required to be manually run if deploying any database migrations. Below builds need to be executed after code has been deployed to each environment. dev = http://jenkins.vfs.va.gov/job/deploys/job/vets-api-server-vagov-dev-post-deploy/build staging = http://jenkins.vfs.va.gov/job/deploys/job/vets-api-server-vagov-staging-post-deploy/build sandbox = http://jenkins.vfs.va.gov/job/deploys/job/vets-api-server-vagov-sandbox-post-deploy/build production = http://jenkins.vfs.va.gov/job/deploys/job/vets-api-server-vagov-prod-post-deploy/build Note: May require waiting up to an hour after code deployment has completed.","title":"Information"},{"location":"deployment/information/#deployment-information","text":"","title":"Deployment Information"},{"location":"deployment/information/#when-merged-pr-is-deployed-to-various-environments","text":"Merged work is automatically deployed to all environments. Below details at what point in the process these auto-deployments will occur. dev + staging + sandbox = immediately after code is merged and passes ci production = once a day at 1pm CT","title":"When merged pr is deployed to various environments"},{"location":"deployment/information/#additional-manual-work","text":"Specific Jenkins builds are required to be manually run if deploying any database migrations. Below builds need to be executed after code has been deployed to each environment. dev = http://jenkins.vfs.va.gov/job/deploys/job/vets-api-server-vagov-dev-post-deploy/build staging = http://jenkins.vfs.va.gov/job/deploys/job/vets-api-server-vagov-staging-post-deploy/build sandbox = http://jenkins.vfs.va.gov/job/deploys/job/vets-api-server-vagov-sandbox-post-deploy/build production = http://jenkins.vfs.va.gov/job/deploys/job/vets-api-server-vagov-prod-post-deploy/build Note: May require waiting up to an hour after code deployment has completed.","title":"Additional manual work"},{"location":"setup/betamocks/","text":"Betamocks \u00b6 Betamocks is a Faraday middleware gem that mocks APIs by recording and replaying requests. It's especially useful for local development to mock out APIs that are behind a VPN, often go down, or when an API may not have a corresponding dev or staging environment. Mockdata for vets-api is in https://github.com/department-of-veterans-affairs/vets-api-mockdata See also: https://github.com/department-of-veterans-affairs/vets-api-mockdata#create-mock-data-for-a-brand-new-service Setup \u00b6 cd to parent directory of vets-api and clone vets-api-mockdata , e.g. if you checked out vets-api to ~/Documents then: 1 2 cd ~/Documents git clone git@github.com:department-of-veterans-affairs/vets-api-mockdata.git If you're using Docker there is no step 2 run make up to start vets-api. If you're not on Docker set the cache dir to the relative path of the mock data repo in config/development.yml file, you may need to run bin/spring stop for the change to take effect. 1 2 3 4 5 6 7 betamocks : enabled : true recording : false # the cache dir depends on how you run the api, run `bin/spring stop` after switching this setting cache_dir : ../vets-api-mockdata # via rails; e.g. bundle exec rails s or bundle exec rails c #cache_dir: /cache # via docker; e.g. make up or make console services_config : config/betamocks/services_config.yml Lighthouse devs can begin making api requests. Va.gov devs can now login with one of the test users without being connect to the VA VPN. By default all users have been mocked for MVI but only M. Webb ( vets.gov.user+228@gmail.com ) will work for the other services unless their mock data has been added. Mocking a Service \u00b6 If a service class implements response middleware, it is important to consider the order in which the middleware is stacked. For further details, refer to the Faraday API documentation . In the following example, Betamocks will only record the raw response from the backing service, and will not record any transformations applied by the ::FacilityParser or ::FacilityValidator middlewares. 1 2 3 4 5 6 7 8 9 10 11 12 13 def connection Faraday . new ( base_path , headers : base_request_headers , request : request_options ) do | conn | conn . use :breakers conn . request :json conn . response :raise_error , error_prefix : service_name conn . response :facility_parser conn . response :facility_validator conn . response :betamocks if Settings . locators . mock_gis conn . adapter Faraday . default_adapter end end Add endpoints to be mocked to the services config file. Each service description has a base_uri (pulled from Settings) endpoints is an array of hashes with: - method: a symbol of the http verb :get , :post , :put ... - path: the path that combined with the base_uri makes a full URI - file_path: where to save the file (relative to betamocks' cache dir) 1 2 3 4 5 6 7 8 :services : # EVSS::PCIUAddress - :base_uri : <%= URI(Settings.evss.url).host %> :endpoints : - :method : :get :path : \"/wss-pciu-services-web/rest/pciuServices/v1/states\" :file_path : \"evss/pciu_address\" In config/settings.yml set betamocks recording to true: 1 2 3 betamocks : enabled : true recording : true Make a request. If a cache file does not exist one will be recorded (turn on your VA VPNs), all subsequent requests will use the cache (feel free to turn off your VA VPNs). Mocking error responses \u00b6 You can record an error response or edit one manually to return an error status, or you can turn errors on and off by adding an error key to the config with an optional body. Restart rails after updating the service config: 1 2 3 4 - :method : :get :path : \"/wss-pciu-services-web/rest/pciuServices/v1/states\" :file_path : \"evss/pciu_address\" :error : 400 1 2 3 4 5 - :method : :get :path : \"/wss-pciu-services-web/rest/pciuServices/v1/states\" :file_path : \"evss/pciu_address\" :error : 420 :body : '{\"key\": \"letter.generator.error\", \"message\": \"the letter generator hamsters have fallen asleep\"}' Caching mulitple responses \u00b6 To record multiple responses for a URI you can add a wildcard in place of the identifier and add a matching locator or in the case of endpoints that use header or body values for identifiers you can write a locator that will be appended to the cache file name. query and header uid_location types use named locators, url and body types use regular expression matchers to extract locators: For query string identifiers \u00b6 The below will record /users?uuid=abc123 and /users?uuid=efg456 to the same directory: 1 2 3 4 5 6 7 :endpoints : - :method : :get :path : \"/users\" :file_path : \"users/list\" :cache_multiple_responses : :uid_location : query :uid_locator : 'uuid' For header identifiers \u00b6 The below will record all /evss/address responses with different identifiers in the request headers to the same directory: 1 2 3 4 5 6 7 :endpoints : - :method : :get :path : \"/evss/address\" :file_path : \"evss/address\" :cache_multiple_responses : :uid_location : header :uid_locator : 'va_eauth_pnid' For URL identifiers \u00b6 The below will record /users/42/forms and /users/101/forms to the same directory: 1 2 3 4 5 6 7 :endpoints : - :method : :get :path : \"/users/*/forms\" :file_path : \"users/form\" :cache_multiple_responses : :uid_location : url :uid_locator : '\\/users\\/(.+)\\/forms' # matches anything '(.+)' between /users and /forms For request body identifiers \u00b6 The below will record all /mvi/find_profile responses with different identifiers in the XML request bodies to the same directory: 1 2 3 4 5 6 7 8 :endpoints : - :method : :post :path : \"/mvi/find_profile\" :file_path : \"mvi/profiles\" :cache_multiple_responses : :uid_location : body :uid_locator : '(?:root=\"2.16.840.1.113883.4.1\" )?extension=\"(\\d{9})\"(?: root=\"2.16.840.1.113883.4.1\")?' extension=","title":"Betamocks"},{"location":"setup/betamocks/#betamocks","text":"Betamocks is a Faraday middleware gem that mocks APIs by recording and replaying requests. It's especially useful for local development to mock out APIs that are behind a VPN, often go down, or when an API may not have a corresponding dev or staging environment. Mockdata for vets-api is in https://github.com/department-of-veterans-affairs/vets-api-mockdata See also: https://github.com/department-of-veterans-affairs/vets-api-mockdata#create-mock-data-for-a-brand-new-service","title":"Betamocks"},{"location":"setup/betamocks/#setup","text":"cd to parent directory of vets-api and clone vets-api-mockdata , e.g. if you checked out vets-api to ~/Documents then: 1 2 cd ~/Documents git clone git@github.com:department-of-veterans-affairs/vets-api-mockdata.git If you're using Docker there is no step 2 run make up to start vets-api. If you're not on Docker set the cache dir to the relative path of the mock data repo in config/development.yml file, you may need to run bin/spring stop for the change to take effect. 1 2 3 4 5 6 7 betamocks : enabled : true recording : false # the cache dir depends on how you run the api, run `bin/spring stop` after switching this setting cache_dir : ../vets-api-mockdata # via rails; e.g. bundle exec rails s or bundle exec rails c #cache_dir: /cache # via docker; e.g. make up or make console services_config : config/betamocks/services_config.yml Lighthouse devs can begin making api requests. Va.gov devs can now login with one of the test users without being connect to the VA VPN. By default all users have been mocked for MVI but only M. Webb ( vets.gov.user+228@gmail.com ) will work for the other services unless their mock data has been added.","title":"Setup"},{"location":"setup/betamocks/#mocking-a-service","text":"If a service class implements response middleware, it is important to consider the order in which the middleware is stacked. For further details, refer to the Faraday API documentation . In the following example, Betamocks will only record the raw response from the backing service, and will not record any transformations applied by the ::FacilityParser or ::FacilityValidator middlewares. 1 2 3 4 5 6 7 8 9 10 11 12 13 def connection Faraday . new ( base_path , headers : base_request_headers , request : request_options ) do | conn | conn . use :breakers conn . request :json conn . response :raise_error , error_prefix : service_name conn . response :facility_parser conn . response :facility_validator conn . response :betamocks if Settings . locators . mock_gis conn . adapter Faraday . default_adapter end end Add endpoints to be mocked to the services config file. Each service description has a base_uri (pulled from Settings) endpoints is an array of hashes with: - method: a symbol of the http verb :get , :post , :put ... - path: the path that combined with the base_uri makes a full URI - file_path: where to save the file (relative to betamocks' cache dir) 1 2 3 4 5 6 7 8 :services : # EVSS::PCIUAddress - :base_uri : <%= URI(Settings.evss.url).host %> :endpoints : - :method : :get :path : \"/wss-pciu-services-web/rest/pciuServices/v1/states\" :file_path : \"evss/pciu_address\" In config/settings.yml set betamocks recording to true: 1 2 3 betamocks : enabled : true recording : true Make a request. If a cache file does not exist one will be recorded (turn on your VA VPNs), all subsequent requests will use the cache (feel free to turn off your VA VPNs).","title":"Mocking a Service"},{"location":"setup/betamocks/#mocking-error-responses","text":"You can record an error response or edit one manually to return an error status, or you can turn errors on and off by adding an error key to the config with an optional body. Restart rails after updating the service config: 1 2 3 4 - :method : :get :path : \"/wss-pciu-services-web/rest/pciuServices/v1/states\" :file_path : \"evss/pciu_address\" :error : 400 1 2 3 4 5 - :method : :get :path : \"/wss-pciu-services-web/rest/pciuServices/v1/states\" :file_path : \"evss/pciu_address\" :error : 420 :body : '{\"key\": \"letter.generator.error\", \"message\": \"the letter generator hamsters have fallen asleep\"}'","title":"Mocking error responses"},{"location":"setup/betamocks/#caching-mulitple-responses","text":"To record multiple responses for a URI you can add a wildcard in place of the identifier and add a matching locator or in the case of endpoints that use header or body values for identifiers you can write a locator that will be appended to the cache file name. query and header uid_location types use named locators, url and body types use regular expression matchers to extract locators:","title":"Caching mulitple responses"},{"location":"setup/betamocks/#for-query-string-identifiers","text":"The below will record /users?uuid=abc123 and /users?uuid=efg456 to the same directory: 1 2 3 4 5 6 7 :endpoints : - :method : :get :path : \"/users\" :file_path : \"users/list\" :cache_multiple_responses : :uid_location : query :uid_locator : 'uuid'","title":"For query string identifiers"},{"location":"setup/betamocks/#for-header-identifiers","text":"The below will record all /evss/address responses with different identifiers in the request headers to the same directory: 1 2 3 4 5 6 7 :endpoints : - :method : :get :path : \"/evss/address\" :file_path : \"evss/address\" :cache_multiple_responses : :uid_location : header :uid_locator : 'va_eauth_pnid'","title":"For header identifiers"},{"location":"setup/betamocks/#for-url-identifiers","text":"The below will record /users/42/forms and /users/101/forms to the same directory: 1 2 3 4 5 6 7 :endpoints : - :method : :get :path : \"/users/*/forms\" :file_path : \"users/form\" :cache_multiple_responses : :uid_location : url :uid_locator : '\\/users\\/(.+)\\/forms' # matches anything '(.+)' between /users and /forms","title":"For URL identifiers"},{"location":"setup/betamocks/#for-request-body-identifiers","text":"The below will record all /mvi/find_profile responses with different identifiers in the XML request bodies to the same directory: 1 2 3 4 5 6 7 8 :endpoints : - :method : :post :path : \"/mvi/find_profile\" :file_path : \"mvi/profiles\" :cache_multiple_responses : :uid_location : body :uid_locator : '(?:root=\"2.16.840.1.113883.4.1\" )?extension=\"(\\d{9})\"(?: root=\"2.16.840.1.113883.4.1\")?' extension=","title":"For request body identifiers"},{"location":"setup/debugging_with_docker_rubymine_windows/","text":"Debugging in Docker, useful for windows developers. \u00b6 UNSUPPORTED. These are community-generated steps. YMMV. These instructions assume you are using RubyMine, an IDE from JetBrains. If you are using another IDE, like VS code, expect to to work through some issues. You can get it here: https://www.jetbrains.com/ruby/ When developing with Windows you need to ensure that your clone pulled down all your files with unix style line endings. To check, from git bash use the file utility: 1 2 $ file docker-compose.yml docker-compose.yml: ASCII text The above output is good. If you see: 1 2 $ file docker-compose.yml docker-compose.yml: ASCII text, with CRLF line terminators That is bad. You will need to re-clone and ensure you pass the test above. There are many resources on the web that can help with this, here is one that can help: https://www.cylindric.net/git/force-lf The main readme describes setting up (touching) your certs. Make sure you do that. API keys: \u00b6 go to: https://developer.va.gov/ and click the 'Request an API key' button. You will receive an email with your API key that you will use in Postman as well as in the setup in settings.local.yml below. .env File \u00b6 Create a .env file in Rails root and add the following code: 1 VETS_API_USER_ID=993 Settings.local.yml \u00b6 Create a settings.local.yml file. Here is a sample. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # betamocks: # For NATIVE installation # The relative path to department-of-veterans-affairs/vets-api-mockdata # cache_dir: ../vets-api-mockdata binaries: # you can specify a full path in settings.local.yml if necessary pdfinfo: pdfinfo pdftk: pdftk clamdscan: ./bin/fake_clamdscan saml: authn_requests_signed: false redis: host: localhost port: 6379 app_data: url: redis://redis:6379 sidekiq: url: redis://redis:6379 lighthouse: api_key: <your api key here> facilities: url: https://sandbox-api.va.gov api_key: <your api key here> forms: url: https://sandbox-api.va.gov/services/va_forms/v0/ mock: false va_forms: drupal_username: <Drupal Username> drupal_password: <Drupal Password> drupal_url: https://prod.cms.va.gov database_url: 'postgis://postgres:password@postgres:5432/vets_api_development?pool=4' test_database_url: 'postgis://postgres:password@postgres:5432/vets_api_test?pool=4' docker_debugging: set_up_db: false hang_around: false The main docker file has the following line: 1 RUN freshclam --config-file freshclam.conf Commenting out this line can save you a lot of time in the initial build if you are using fake clamscan. Now it is time to do your initial build. You need to do this before configuring RubyMine because the image must be built in order for RubyMine to be able to scan it for gems. Run following from Rails root (this will cause the PUMA server to come up as well): 1 touch docker_debugging Now build the Docker image and bring up Puma via: 1 docker-compose up This will be time-consuming the first time that you do this. When you see the following you are up and running: 1 vets-api_1 | * Listening on tcp://0.0.0.0:3000 Eventually Puma will come up and you can hit an endpoint in a browser at: http://localhost:3000/v0/status Verify that it returns: 1 {\"git_revision\":\"MISSING_GIT_REVISION\",\"db_url\":null} Now we need to configure RubyMine for remote debugging so bring the Docker containers down: 1 docker-compose down Open Ruby mine and open the settings page (File -> Settings -> Ruby SDK and Gems). Select '+' -> 'new remote'. Choose the 'Docker Compose' radio button and 'vets-api' for the service. Now we are ready to set a breakpoint and debug in RubyMine via the Docker container. Run -> debug... -> edit configurations Select '+' to add a new rails configuration. Name the debug configuration (VetsApi Docker) and accept the defaults. Set a breakpoint in the AdminController. Now, run the following endpoint and ensure that the breakpoint is hit: http://localhost:3000/v0/status Debugging in RubyMine ONLY brings up PUMA. So, if you need to run sidekiq you will need to log into the container using the bash scripts and run commands such as: 1 foreman start -m job=1,clamd=0,freshclam=0 Interacting with the shell: \u00b6 Create the following scripts and run them from a GitBash terminal. They can be placed wherever you want as they are used to connect the vets-api Docker container. go.bash (connects as vets-api user) 1 2 #!/usr/bin/bash winpty docker exec -it vets-api_vets-api_1 bash rgo.bash (connects as root user) 1 2 #!/usr/bin/bash winpty docker exec -u 0 -it vets-api_vets-api_1 bash Allows you to interact with the application from the shell like: - rake lint - rails console For more details see: native instructions Viewing swagger docs \u00b6 1 git clone https://github.com/department-of-veterans-affairs/developer-portal Create a .env.local file in developer-portal root: 1 2 3 4 PORT=3001 REACT_APP_VETSGOV_SWAGGER_API=http://localhost:3000 REACT_APP_DEVELOPER_PORTAL_SELF_SERVICE_URL=http://localhost:3000 REACT_APP_SALESFORCE_ENV=VICDEV Run: - npm install - npm start Set up your SSH keys: Follow these instructions for generating and setting up your SSH public and private keys. https://github.com/department-of-veterans-affairs/va.gov-team/blob/master/platform/engineering/internal-tools.md#creating-an-ssh-keypair-in-windows Once these keys are generated you will need to request environment access. https://github.com/department-of-veterans-affairs/va.gov-team/issues/new?assignees=&labels=external-request%2C+operations&template=Environment-Access-Request-Template.md&title=Access+for+%5Bindividual%5D","title":"Debugging with Docker RubyMine Windows"},{"location":"setup/debugging_with_docker_rubymine_windows/#debugging-in-docker-useful-for-windows-developers","text":"UNSUPPORTED. These are community-generated steps. YMMV. These instructions assume you are using RubyMine, an IDE from JetBrains. If you are using another IDE, like VS code, expect to to work through some issues. You can get it here: https://www.jetbrains.com/ruby/ When developing with Windows you need to ensure that your clone pulled down all your files with unix style line endings. To check, from git bash use the file utility: 1 2 $ file docker-compose.yml docker-compose.yml: ASCII text The above output is good. If you see: 1 2 $ file docker-compose.yml docker-compose.yml: ASCII text, with CRLF line terminators That is bad. You will need to re-clone and ensure you pass the test above. There are many resources on the web that can help with this, here is one that can help: https://www.cylindric.net/git/force-lf The main readme describes setting up (touching) your certs. Make sure you do that.","title":"Debugging in Docker, useful for windows developers."},{"location":"setup/debugging_with_docker_rubymine_windows/#api-keys","text":"go to: https://developer.va.gov/ and click the 'Request an API key' button. You will receive an email with your API key that you will use in Postman as well as in the setup in settings.local.yml below.","title":"API keys:"},{"location":"setup/debugging_with_docker_rubymine_windows/#env-file","text":"Create a .env file in Rails root and add the following code: 1 VETS_API_USER_ID=993","title":".env File"},{"location":"setup/debugging_with_docker_rubymine_windows/#settingslocalyml","text":"Create a settings.local.yml file. Here is a sample. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # betamocks: # For NATIVE installation # The relative path to department-of-veterans-affairs/vets-api-mockdata # cache_dir: ../vets-api-mockdata binaries: # you can specify a full path in settings.local.yml if necessary pdfinfo: pdfinfo pdftk: pdftk clamdscan: ./bin/fake_clamdscan saml: authn_requests_signed: false redis: host: localhost port: 6379 app_data: url: redis://redis:6379 sidekiq: url: redis://redis:6379 lighthouse: api_key: <your api key here> facilities: url: https://sandbox-api.va.gov api_key: <your api key here> forms: url: https://sandbox-api.va.gov/services/va_forms/v0/ mock: false va_forms: drupal_username: <Drupal Username> drupal_password: <Drupal Password> drupal_url: https://prod.cms.va.gov database_url: 'postgis://postgres:password@postgres:5432/vets_api_development?pool=4' test_database_url: 'postgis://postgres:password@postgres:5432/vets_api_test?pool=4' docker_debugging: set_up_db: false hang_around: false The main docker file has the following line: 1 RUN freshclam --config-file freshclam.conf Commenting out this line can save you a lot of time in the initial build if you are using fake clamscan. Now it is time to do your initial build. You need to do this before configuring RubyMine because the image must be built in order for RubyMine to be able to scan it for gems. Run following from Rails root (this will cause the PUMA server to come up as well): 1 touch docker_debugging Now build the Docker image and bring up Puma via: 1 docker-compose up This will be time-consuming the first time that you do this. When you see the following you are up and running: 1 vets-api_1 | * Listening on tcp://0.0.0.0:3000 Eventually Puma will come up and you can hit an endpoint in a browser at: http://localhost:3000/v0/status Verify that it returns: 1 {\"git_revision\":\"MISSING_GIT_REVISION\",\"db_url\":null} Now we need to configure RubyMine for remote debugging so bring the Docker containers down: 1 docker-compose down Open Ruby mine and open the settings page (File -> Settings -> Ruby SDK and Gems). Select '+' -> 'new remote'. Choose the 'Docker Compose' radio button and 'vets-api' for the service. Now we are ready to set a breakpoint and debug in RubyMine via the Docker container. Run -> debug... -> edit configurations Select '+' to add a new rails configuration. Name the debug configuration (VetsApi Docker) and accept the defaults. Set a breakpoint in the AdminController. Now, run the following endpoint and ensure that the breakpoint is hit: http://localhost:3000/v0/status Debugging in RubyMine ONLY brings up PUMA. So, if you need to run sidekiq you will need to log into the container using the bash scripts and run commands such as: 1 foreman start -m job=1,clamd=0,freshclam=0","title":"Settings.local.yml"},{"location":"setup/debugging_with_docker_rubymine_windows/#interacting-with-the-shell","text":"Create the following scripts and run them from a GitBash terminal. They can be placed wherever you want as they are used to connect the vets-api Docker container. go.bash (connects as vets-api user) 1 2 #!/usr/bin/bash winpty docker exec -it vets-api_vets-api_1 bash rgo.bash (connects as root user) 1 2 #!/usr/bin/bash winpty docker exec -u 0 -it vets-api_vets-api_1 bash Allows you to interact with the application from the shell like: - rake lint - rails console For more details see: native instructions","title":"Interacting with the shell:"},{"location":"setup/debugging_with_docker_rubymine_windows/#viewing-swagger-docs","text":"1 git clone https://github.com/department-of-veterans-affairs/developer-portal Create a .env.local file in developer-portal root: 1 2 3 4 PORT=3001 REACT_APP_VETSGOV_SWAGGER_API=http://localhost:3000 REACT_APP_DEVELOPER_PORTAL_SELF_SERVICE_URL=http://localhost:3000 REACT_APP_SALESFORCE_ENV=VICDEV Run: - npm install - npm start Set up your SSH keys: Follow these instructions for generating and setting up your SSH public and private keys. https://github.com/department-of-veterans-affairs/va.gov-team/blob/master/platform/engineering/internal-tools.md#creating-an-ssh-keypair-in-windows Once these keys are generated you will need to request environment access. https://github.com/department-of-veterans-affairs/va.gov-team/issues/new?assignees=&labels=external-request%2C+operations&template=Environment-Access-Request-Template.md&title=Access+for+%5Bindividual%5D","title":"Viewing swagger docs"},{"location":"setup/docker/","text":"Docker Setup \u00b6 Docker Desktop (Engine + Compose) \u00b6 Mac Windows Linux (Ubuntu) \u00b6 Docker Engine Docker Compose","title":"Docker"},{"location":"setup/docker/#docker-setup","text":"","title":"Docker Setup"},{"location":"setup/docker/#docker-desktop-engine-compose","text":"Mac Windows","title":"Docker Desktop (Engine + Compose)"},{"location":"setup/docker/#linux-ubuntu","text":"Docker Engine Docker Compose","title":"Linux (Ubuntu)"},{"location":"setup/edu_benefits/","text":"Education Benefits Year to Date Report \u00b6 The year to date report uses GovDelivery to send the email and S3 to upload a link to the generated CSV file. To test sending the report, copy the following configuration into config/settings.local.yml with the appropriate values filled in: 1 2 3 4 5 6 7 reports : token : ... aws : access_key_id : ... secret_access_key : ... region : ... bucket : ...","title":"Education Benefits Year to Date Report"},{"location":"setup/edu_benefits/#education-benefits-year-to-date-report","text":"The year to date report uses GovDelivery to send the email and S3 to upload a link to the generated CSV file. To test sending the report, copy the following configuration into config/settings.local.yml with the appropriate values filled in: 1 2 3 4 5 6 7 reports : token : ... aws : access_key_id : ... secret_access_key : ... region : ... bucket : ...","title":"Education Benefits Year to Date Report"},{"location":"setup/evss/","text":"EVSS S3 Uploads \u00b6 Uploaded disability claim documents are handled by CarrierWave and either sent to Amazon S3 or saved to disk. To enable S3 uploads, copy the following configuration into config/settings.local.yml with the appropriate values: 1 2 3 4 5 evss : s3 : uploads_enabled : true bucket : ... region : ... EVSS Disability Claims Setup \u00b6 For this app to be properly configured, you will need to copy the following configuration into config/settings.local.yml with the appropriate URL: 1 2 evss : url : ... The config/settings.yml file contains an example mock endpoint. For actual backend testing, you will need to reference the appropriate private repository. EVSS Service via Open VPN \u00b6 To develop locally against the EVSS CI environment you must connect through the 'EVSS Open' VPN. Contact your product/project manager for access.","title":"EVSS S3 Uploads"},{"location":"setup/evss/#evss-s3-uploads","text":"Uploaded disability claim documents are handled by CarrierWave and either sent to Amazon S3 or saved to disk. To enable S3 uploads, copy the following configuration into config/settings.local.yml with the appropriate values: 1 2 3 4 5 evss : s3 : uploads_enabled : true bucket : ... region : ...","title":"EVSS S3 Uploads"},{"location":"setup/evss/#evss-disability-claims-setup","text":"For this app to be properly configured, you will need to copy the following configuration into config/settings.local.yml with the appropriate URL: 1 2 evss : url : ... The config/settings.yml file contains an example mock endpoint. For actual backend testing, you will need to reference the appropriate private repository.","title":"EVSS Disability Claims Setup"},{"location":"setup/evss/#evss-service-via-open-vpn","text":"To develop locally against the EVSS CI environment you must connect through the 'EVSS Open' VPN. Contact your product/project manager for access.","title":"EVSS Service via Open VPN"},{"location":"setup/facilities_locator/","text":"Facilities Locator Setup \u00b6 For the current maps.va.gov endpoint, you will need to add the VA internal root CA certificate to your trusted certificates. With homebrew this is typically done by appending the exported/downloaded certificate to <HOMEBREW_DIR>/etc/openssl/cert.pem . Retrieving Mental Health Phone Numbers \u00b6 To retrieve mental health phone numbers, run the jobs:pull_facility_mental_health_phone rake task E.g., bundle exec rake jobs:pull_facility_mental_health_phone","title":"Facilities Locator Setup"},{"location":"setup/facilities_locator/#facilities-locator-setup","text":"For the current maps.va.gov endpoint, you will need to add the VA internal root CA certificate to your trusted certificates. With homebrew this is typically done by appending the exported/downloaded certificate to <HOMEBREW_DIR>/etc/openssl/cert.pem .","title":"Facilities Locator Setup"},{"location":"setup/facilities_locator/#retrieving-mental-health-phone-numbers","text":"To retrieve mental health phone numbers, run the jobs:pull_facility_mental_health_phone rake task E.g., bundle exec rake jobs:pull_facility_mental_health_phone","title":"Retrieving Mental Health Phone Numbers"},{"location":"setup/hybrid/","text":"Developer Setup \u00b6 In hybrid mode, you will run vets-api natively, but run Postgres and Redis in Docker. By doing so you avoid any challenges of installing these two software packages and keeping them upgraded to the appropriate version. Base Setup \u00b6 Install Docker as referenced in the Docker setup instructions . Follow the Native setup instructions , but skip any steps related to installing Postgres, Postgis, or Redis. You will need to install the other dependencies such as pdftk and clamav. Configure vets-api to point to the Docker-ized dependencies. Add the following to config/settings.local.yml : 1 2 3 4 5 6 7 8 9 10 database_url: postgis://postgres:password@localhost:54320/vets_api_development?pool=4 test_database_url: postgis://postgres:password@localhost:54320/vets_api_test?pool=4 redis: host: localhost port: 63790 app_data: url: redis://localhost:63790 sidekiq: url: redis://localhost:63790 Note: If you have local instances of Postgres or Redis that were only for use by vets-api, you can stop them to save system resources. Running \u00b6 To start Postgres and Redis: docker-compose -f docker-compose-deps.yml up Start vets-api as per the native running instructions .","title":"Hybrid Developer Setup"},{"location":"setup/hybrid/#developer-setup","text":"In hybrid mode, you will run vets-api natively, but run Postgres and Redis in Docker. By doing so you avoid any challenges of installing these two software packages and keeping them upgraded to the appropriate version.","title":"Developer Setup"},{"location":"setup/hybrid/#base-setup","text":"Install Docker as referenced in the Docker setup instructions . Follow the Native setup instructions , but skip any steps related to installing Postgres, Postgis, or Redis. You will need to install the other dependencies such as pdftk and clamav. Configure vets-api to point to the Docker-ized dependencies. Add the following to config/settings.local.yml : 1 2 3 4 5 6 7 8 9 10 database_url: postgis://postgres:password@localhost:54320/vets_api_development?pool=4 test_database_url: postgis://postgres:password@localhost:54320/vets_api_test?pool=4 redis: host: localhost port: 63790 app_data: url: redis://localhost:63790 sidekiq: url: redis://localhost:63790 Note: If you have local instances of Postgres or Redis that were only for use by vets-api, you can stop them to save system resources.","title":"Base Setup"},{"location":"setup/hybrid/#running","text":"To start Postgres and Redis: docker-compose -f docker-compose-deps.yml up Start vets-api as per the native running instructions .","title":"Running"},{"location":"setup/local_network_access/","text":"Local Network Access \u00b6 These changes will work for accessing a local deploy on another device on the same network. Find the IP of the machine running vets-api and vets-website, i.e 192.168.x.x . The IP of the machine may look like 10.0.x.x or 172.16.x.x instead Mac 1. System Preferences > Network 1. Click the connection you are using to connect to the internet 1. Look for Status , underneath the laptop's IP address will be listed, i.e 192.168.x.x Windows - https://support.microsoft.com/en-us/help/4026518/windows-10-find-your-ip-address Run vets-website so that devices on your local network can access it 1 yarn watch --env.host 0.0.0.0 --env.public 198.162.x.x:3001 In settings.local.yml 1. Add http://192.168.x.x:3000 and http://192.168.x.x:3001 to web_origin 1. Add \"192.168.x.x\" to virtual_hosts 1. Set virtual_host_localhost to 192.168.x.x 1 2 3 4 5 # For CORS requests; separate multiple origins with a comma web_origin: http://192.168.x.x:3000, http://192.168.x.x:3001 virtual_hosts: [\"127.0.0.1\", \"localhost\", \"192.168.x.x\"] virtual_host_localhost: 192.168.x.x 1. Make sure to rebuild vets-api before starting 1 2 make rebuild; make up; From a device on the same network go to 192.168.x.x:3001","title":"Local Network Access"},{"location":"setup/local_network_access/#local-network-access","text":"These changes will work for accessing a local deploy on another device on the same network. Find the IP of the machine running vets-api and vets-website, i.e 192.168.x.x . The IP of the machine may look like 10.0.x.x or 172.16.x.x instead Mac 1. System Preferences > Network 1. Click the connection you are using to connect to the internet 1. Look for Status , underneath the laptop's IP address will be listed, i.e 192.168.x.x Windows - https://support.microsoft.com/en-us/help/4026518/windows-10-find-your-ip-address Run vets-website so that devices on your local network can access it 1 yarn watch --env.host 0.0.0.0 --env.public 198.162.x.x:3001 In settings.local.yml 1. Add http://192.168.x.x:3000 and http://192.168.x.x:3001 to web_origin 1. Add \"192.168.x.x\" to virtual_hosts 1. Set virtual_host_localhost to 192.168.x.x 1 2 3 4 5 # For CORS requests; separate multiple origins with a comma web_origin: http://192.168.x.x:3000, http://192.168.x.x:3001 virtual_hosts: [\"127.0.0.1\", \"localhost\", \"192.168.x.x\"] virtual_host_localhost: 192.168.x.x 1. Make sure to rebuild vets-api before starting 1 2 make rebuild; make up; From a device on the same network go to 192.168.x.x:3001","title":"Local Network Access"},{"location":"setup/mailer/","text":"Mailers \u00b6 Location of mailers Location of views Useful checks Previewing emails \u00b6 Action Mailer previews provide a way to see how emails look by visiting a special URL that renders them. . The ActionMailer::Preview classes location . These previews are available at: http://localhost:3000/rails/mailers https://staging-api.va.gov/rails/mailers/","title":"Mailers Info"},{"location":"setup/mailer/#mailers","text":"Location of mailers Location of views Useful checks","title":"Mailers"},{"location":"setup/mailer/#previewing-emails","text":"Action Mailer previews provide a way to see how emails look by visiting a special URL that renders them. . The ActionMailer::Preview classes location . These previews are available at: http://localhost:3000/rails/mailers https://staging-api.va.gov/rails/mailers/","title":"Previewing emails"},{"location":"setup/mhv/","text":"MHV Prescriptions and MHV Secure Messaging Setup \u00b6 Prescription refill and secure-messaging require a working MHV (MyHealthEVet) config. You will need to copy the following configuration into config/settings.local.yml with the appropriate values filled in. 1 2 3 4 5 6 7 mhv : rx : host : ... app_token : ... sm : host : ... app_token : ... The config/settings.yml file contains example mock endpoints. For actual backend testing, you will need to reference the appropriate private repository.","title":"MHV Prescriptions and MHV Secure Messaging Setup"},{"location":"setup/mhv/#mhv-prescriptions-and-mhv-secure-messaging-setup","text":"Prescription refill and secure-messaging require a working MHV (MyHealthEVet) config. You will need to copy the following configuration into config/settings.local.yml with the appropriate values filled in. 1 2 3 4 5 6 7 mhv : rx : host : ... app_token : ... sm : host : ... app_token : ... The config/settings.yml file contains example mock endpoints. For actual backend testing, you will need to reference the appropriate private repository.","title":"MHV Prescriptions and MHV Secure Messaging Setup"},{"location":"setup/mpi/","text":"MPI Service \u00b6 The Master Person Index (formerly Master Veteran Index, so mvi is used as a key for settings purposes) service retrieves and updates a veteran's 'golden record'. To configure vets-api for use with MPI, configure config/settings.local.yml with the settings given to you by devops or your team. For example, 1 2 3 # config/settings.local.yml mvi: url: ... Since that URL is only accessible over the VA VPN a mock service is included in the project. To enable it, add this to config/settings.local.yml : 1 2 mvi: mock: true","title":"MPI Service"},{"location":"setup/mpi/#mpi-service","text":"The Master Person Index (formerly Master Veteran Index, so mvi is used as a key for settings purposes) service retrieves and updates a veteran's 'golden record'. To configure vets-api for use with MPI, configure config/settings.local.yml with the settings given to you by devops or your team. For example, 1 2 3 # config/settings.local.yml mvi: url: ... Since that URL is only accessible over the VA VPN a mock service is included in the project. To enable it, add this to config/settings.local.yml : 1 2 mvi: mock: true","title":"MPI Service"},{"location":"setup/native/","text":"Developer Setup \u00b6 Vets API requires: Ruby 2.7.6 PostgreSQL 11.x (including PostGIS 2.5) Redis 5.0.x The most up-to-date versions of each key dependency will be specified in the docker-compose.yml file and the Dockerfile . We suggest using a Ruby version manager such as rbenv , asdf , rvm , or chruby to install and maintain your version of Ruby. Base Setup \u00b6 Follow the common base setup . Install Bundler to manage Ruby dependencies 1 gem install bundler Follow the platform specific notes below for OSX or Ubuntu to get dependencies installed. Install gem dependencies: 1 cd vets-api ; bundle install More information about installing with Sidekiq Enterprise as well as our credentials are on the internal system here Make sure you have the vets-api-mockdata repo locally installed, preferably in a sibling directory to vets-api . Go to the file config/settings/development.yml and make sure the cache-dir points to the local installation of vets-api-mockdata from the previous step. 1 2 cache_dir : ../vets-api-mockdata # via rails; e.g. bundle exec rails s or bundle exec rails c # cache_dir: /cache # via docker; e.g. make up or make console Add this key in config/settings.local.yml pointing to your vets-api-mockdata directory. 1 2 3 # settings.local.yml betamocks : cache_dir : ../vets-api-mockdata Run bin/setup to setup the database and start the server. pg_stat_statements \u00b6 If you have trouble enabling query stats from the PgHero dashboard, try enabling it manually Add the lines below to your main postgresql.conf file On Mac it should be located somewhere similiar to the following: ~/Library/Application Support/Postgres/var-12/postgresql.conf 1 2 3 4 shared_preload_libraries = 'pg_stat_statements' pg_stat_statements.track = all pg_stat_statements.max = 10000 track_activity_query_size = 2048 Make sure to migrate your database to enable the pg_stat_statements extension Settings and configuration \u00b6 We use the config gem to manage settings in the application. Local settings for each developer should be managed in your own local config/settings.local.yml file, which by default can override the standard configuration and is excluded from source control so the settings can persist. This file has the necessary configuration settings for local development as well as comments outlining some additional configuration that some developers may wish to use. Configuring ClamAV antivirus \u00b6 In many cases, there in no need to run ClamAV for local development, even if you are working with uploaded files since the scanning functionality is already built into our CarrierWave and Shrine file upload base classes. If you would like to run a fake ClamAV \"scanner\" that will quickly produce a virus-free scan, you can configure the application to use the executable bash script bin/fake_clamd . This configuration is commented out in config/settings.local.yml 1 2 3 4 5 binaries : # For NATIVE and DOCKER installation # A \"virus scanner\" that always returns success for development purposes # NOTE: You may need to specify a full path instead of a relative path clamdscan : ./bin/fake_clamdscan If you wish to run ClamAV, you'll need to check the platform specific notes. Platform Specific Notes \u00b6 Specific notes for our most common native installation platforms are in this section. Note that most Windows users tend to use Docker instead of a native installation. OSX \u00b6 All of the OSX instructions assume homebrew is your package manager Install Postgresql & PostGIS It is MUCH easier to use the Postgres.app which installs the correct combination of Postgresql and PostGIS versions. Download the Postgres.app with PostgreSQL 10, 11 and 12 Install Instructions here: https://postgresapp.com/ sudo mkdir -p /etc/paths.d && echo /Applications/Postgres.app/Contents/Versions/latest/bin | sudo tee /etc/paths.d/postgresapp ARCHFLAGS=\"-arch x86_64\" gem install pg -v 1.2.3 1. Alternatively Postgresql 11 & PostGIS 2.5 can be installed with homebrew - brew install postgresql@11 - brew services start postgresql@11 - Install the pex manager to add your Postgresql 11 extensions from here - Install the postgis extension along with a number of patches using the instructions summarized here : - bash PG_CPPFLAGS='-DACCEPT_USE_OF_DEPRECATED_PROJ_API_H -I/usr/local/include' CFLAGS='-DACCEPT_USE_OF_DEPRECATED_PROJ_API_H -I/usr/local/include' pex install postgis Install binary dependencies: 1 brew bundle Among other things, the above brew bundle command installs ClamAV, but does not enable it. To enable ClamAV: 1 2 3 4 5 6 7 8 brew info clamav # See the \"Caveats\" section: \"To finish installation & run clamav you will need to edit the example conf files at `${conf_files_dir}`\" cd $( brew --prefix clamav ) touch clamd.sock echo \"LocalSocket $( brew --prefix clamav ) \" > clamd.conf echo \"DatabaseMirror database.clamav.net\" > freshclam.conf # Update the local ClamAV database freshclam -v NOTE: Run with /usr/local/sbin/clamd -c /usr/local/etc/clamav/clamd.conf and you will also have to override (temporarily) the config/clamd.conf file with -LocalSocket /usr/local/etc/clamav/clamd.sock Install pdftk curl -o ~/Downloads/pdftk_download.pkg https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/pdftk_server-2.02-mac_osx-10.11-setup.pkg sudo installer -pkg ~/Downloads/pdftk_download.pkg -target / continue with Base setup Alternative (Ubuntu 20.04 LTS) \u00b6 Install Postgres and enable on startup 1 2 3 4 5 6 7 8 9 wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - echo \"deb http://apt.postgresql.org/pub/repos/apt/ focal\" -pgdg main | sudo tee /etc/apt/sources.list.d/pgdg.list sudo apt update sudo apt install postgresql-11 sudo systemctl start postgresql sudo -i -u postgres createuser --superuser YOURNAME exit Install PostGIS 1 2 3 4 5 6 7 8 9 10 sudo apt install -y postgresql-11-postgis-2.5 sudo -i -u postgres createuser postgis_test createdb postgis_db -O postgis_test psql -d postgis_db CREATE EXTENSION postgis ; SELECT PostGIS_version () ; \\q Install Redis 1 2 3 4 sudo apt install -y redis-server sudo sed -i 's/^supervised no/supervised systemd/' /etc/redis/redis.conf sudo systemctl restart redis.service sudo systemctl status redis # ctrl+c to exit Install ImageMagick sudo apt install -y imagemagick Install Poppler sudo apt install -y poppler-utils Install ClamAV sudo apt install -y clamav Install pdftk sudo apt install -y pdftk continue with Base setup","title":"Native Developer Setup"},{"location":"setup/native/#developer-setup","text":"Vets API requires: Ruby 2.7.6 PostgreSQL 11.x (including PostGIS 2.5) Redis 5.0.x The most up-to-date versions of each key dependency will be specified in the docker-compose.yml file and the Dockerfile . We suggest using a Ruby version manager such as rbenv , asdf , rvm , or chruby to install and maintain your version of Ruby.","title":"Developer Setup"},{"location":"setup/native/#base-setup","text":"Follow the common base setup . Install Bundler to manage Ruby dependencies 1 gem install bundler Follow the platform specific notes below for OSX or Ubuntu to get dependencies installed. Install gem dependencies: 1 cd vets-api ; bundle install More information about installing with Sidekiq Enterprise as well as our credentials are on the internal system here Make sure you have the vets-api-mockdata repo locally installed, preferably in a sibling directory to vets-api . Go to the file config/settings/development.yml and make sure the cache-dir points to the local installation of vets-api-mockdata from the previous step. 1 2 cache_dir : ../vets-api-mockdata # via rails; e.g. bundle exec rails s or bundle exec rails c # cache_dir: /cache # via docker; e.g. make up or make console Add this key in config/settings.local.yml pointing to your vets-api-mockdata directory. 1 2 3 # settings.local.yml betamocks : cache_dir : ../vets-api-mockdata Run bin/setup to setup the database and start the server.","title":"Base Setup"},{"location":"setup/native/#pg_stat_statements","text":"If you have trouble enabling query stats from the PgHero dashboard, try enabling it manually Add the lines below to your main postgresql.conf file On Mac it should be located somewhere similiar to the following: ~/Library/Application Support/Postgres/var-12/postgresql.conf 1 2 3 4 shared_preload_libraries = 'pg_stat_statements' pg_stat_statements.track = all pg_stat_statements.max = 10000 track_activity_query_size = 2048 Make sure to migrate your database to enable the pg_stat_statements extension","title":"pg_stat_statements"},{"location":"setup/native/#settings-and-configuration","text":"We use the config gem to manage settings in the application. Local settings for each developer should be managed in your own local config/settings.local.yml file, which by default can override the standard configuration and is excluded from source control so the settings can persist. This file has the necessary configuration settings for local development as well as comments outlining some additional configuration that some developers may wish to use.","title":"Settings and configuration"},{"location":"setup/native/#configuring-clamav-antivirus","text":"In many cases, there in no need to run ClamAV for local development, even if you are working with uploaded files since the scanning functionality is already built into our CarrierWave and Shrine file upload base classes. If you would like to run a fake ClamAV \"scanner\" that will quickly produce a virus-free scan, you can configure the application to use the executable bash script bin/fake_clamd . This configuration is commented out in config/settings.local.yml 1 2 3 4 5 binaries : # For NATIVE and DOCKER installation # A \"virus scanner\" that always returns success for development purposes # NOTE: You may need to specify a full path instead of a relative path clamdscan : ./bin/fake_clamdscan If you wish to run ClamAV, you'll need to check the platform specific notes.","title":"Configuring ClamAV antivirus"},{"location":"setup/native/#platform-specific-notes","text":"Specific notes for our most common native installation platforms are in this section. Note that most Windows users tend to use Docker instead of a native installation.","title":"Platform Specific Notes"},{"location":"setup/native/#osx","text":"All of the OSX instructions assume homebrew is your package manager Install Postgresql & PostGIS It is MUCH easier to use the Postgres.app which installs the correct combination of Postgresql and PostGIS versions. Download the Postgres.app with PostgreSQL 10, 11 and 12 Install Instructions here: https://postgresapp.com/ sudo mkdir -p /etc/paths.d && echo /Applications/Postgres.app/Contents/Versions/latest/bin | sudo tee /etc/paths.d/postgresapp ARCHFLAGS=\"-arch x86_64\" gem install pg -v 1.2.3 1. Alternatively Postgresql 11 & PostGIS 2.5 can be installed with homebrew - brew install postgresql@11 - brew services start postgresql@11 - Install the pex manager to add your Postgresql 11 extensions from here - Install the postgis extension along with a number of patches using the instructions summarized here : - bash PG_CPPFLAGS='-DACCEPT_USE_OF_DEPRECATED_PROJ_API_H -I/usr/local/include' CFLAGS='-DACCEPT_USE_OF_DEPRECATED_PROJ_API_H -I/usr/local/include' pex install postgis Install binary dependencies: 1 brew bundle Among other things, the above brew bundle command installs ClamAV, but does not enable it. To enable ClamAV: 1 2 3 4 5 6 7 8 brew info clamav # See the \"Caveats\" section: \"To finish installation & run clamav you will need to edit the example conf files at `${conf_files_dir}`\" cd $( brew --prefix clamav ) touch clamd.sock echo \"LocalSocket $( brew --prefix clamav ) \" > clamd.conf echo \"DatabaseMirror database.clamav.net\" > freshclam.conf # Update the local ClamAV database freshclam -v NOTE: Run with /usr/local/sbin/clamd -c /usr/local/etc/clamav/clamd.conf and you will also have to override (temporarily) the config/clamd.conf file with -LocalSocket /usr/local/etc/clamav/clamd.sock Install pdftk curl -o ~/Downloads/pdftk_download.pkg https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/pdftk_server-2.02-mac_osx-10.11-setup.pkg sudo installer -pkg ~/Downloads/pdftk_download.pkg -target / continue with Base setup","title":"OSX"},{"location":"setup/native/#alternative-ubuntu-2004-lts","text":"Install Postgres and enable on startup 1 2 3 4 5 6 7 8 9 wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - echo \"deb http://apt.postgresql.org/pub/repos/apt/ focal\" -pgdg main | sudo tee /etc/apt/sources.list.d/pgdg.list sudo apt update sudo apt install postgresql-11 sudo systemctl start postgresql sudo -i -u postgres createuser --superuser YOURNAME exit Install PostGIS 1 2 3 4 5 6 7 8 9 10 sudo apt install -y postgresql-11-postgis-2.5 sudo -i -u postgres createuser postgis_test createdb postgis_db -O postgis_test psql -d postgis_db CREATE EXTENSION postgis ; SELECT PostGIS_version () ; \\q Install Redis 1 2 3 4 sudo apt install -y redis-server sudo sed -i 's/^supervised no/supervised systemd/' /etc/redis/redis.conf sudo systemctl restart redis.service sudo systemctl status redis # ctrl+c to exit Install ImageMagick sudo apt install -y imagemagick Install Poppler sudo apt install -y poppler-utils Install ClamAV sudo apt install -y clamav Install pdftk sudo apt install -y pdftk continue with Base setup","title":"Alternative (Ubuntu 20.04 LTS)"},{"location":"setup/rswag_setup/","text":"Rswag setup for Rails engine \u00b6 To create a minimal implementation of Rswag in your team's Rails engine you will need to do the following (commented lines are only for explaining what specific things do and should be removed from your specific implementation): In /spec/swagger_helper.rb add your Rails Engine's name eg AppealsApi to the config.swagger_docs section. Create your Rswag config file in your engine's spec/support dir (eg /modules/appeals_api/spec/support/rswag_config.rb ) a minimal configuration is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 # /modules/appeals_api/spec/support/rswag_config.rb class AppealsApi :: RswagConfig def config { 'modules/appeals_api/app/swagger/appeals_api/v2/swagger.json' => { # ^ This path points to wherever you would like Rswag to save the generated swagger json file. openapi : '3.0.1' , info : { title : 'Decision Reviews' , version : 'v2' , termsOfService : 'https://developer.va.gov/terms-of-service' , description : File . read ( AppealsApi :: Engine . root . join ( 'app' , 'swagger' , 'appeals_api' , 'v2' , 'api_description.md' )) # ^ You could have the description inline, but saving it as a standalone file makes it easier to edit/manage }, tags : [ { name : 'Higher-Level Reviews' , description : '' } # ^ These tags are used for grouping each individual endpoint in the swagger UI ] , components : { securitySchemes : { # ^ add your relevant security schemes here apikey : { type : :apiKey , name : :apikey , in : :header } }, schemas : { # ^ schemas that can be used across multiple Rswag specs 'nonBlankString' : { 'type' : 'string' , 'pattern' : '[^ \\\\ f \\\\ n \\\\ r \\\\ t \\\\ v \\\\ u00a0 \\\\ u1680 \\\\ u2000- \\\\ u200a \\\\ u2028 \\\\ u2029 \\\\ u202f \\\\ u205f \\\\ u3000 \\\\ ufeff]' , '$comment' : \"The pattern used ensures that a string has at least one non-whitespace character. The pattern comes from JavaScript's \\\\ s character class. \\\"\\\\ s Matches a single white space character, including space, tab, form feed, line feed, and other Unicode spaces. Equivalent to [ \\\\ f \\\\ n \\\\ r \\\\ t \\\\ v \\\\ u00a0 \\\\ u1680 \\\\ u2000- \\\\ u200a \\\\ u2028 \\\\ u2029 \\\\ u202f \\\\ u205f \\\\ u3000 \\\\ ufeff]. \\\" : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes We are using simple character classes at JSON Schema's recommendation: https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-4.3\" } } }, paths : {}, basePath : '/services/appeals/v2/decision_reviews' , # ^ basePath is used in building up the url that Rswag will use in testing servers : [ # ^ Used in creating the 'Environment' drop-down for generating example curl commands { url : 'https://dev-api.va.gov/services/appeals/{version}/decision_reviews' , description : 'VA.gov API sandbox environment' , variables : { version : { default : 'v2' } } } ] } } end end Add your engines rake task to rakelib/rswag.rake by copy and pasting the following (substituting your relevant Rails engine in): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # rakelib/rswag.rake namespace :rswag do # ... namespace :appeals_api do desc 'Generate rswag docs for appeals_api' task run : :environment do ENV [ 'PATTERN' ] = 'modules/appeals_api/spec/docs/**/*_spec.rb' # ^ specifies the path of the specs you'd like Rswag to run ENV [ 'RAILS_MODULE' ] = 'appeals_api' # ^ added to make Rswag only write out swagger json relevant to your Rails engine ENV [ 'SWAGGER_DRY_RUN' ] = '0' # ^ Turns off the dry Rswag option - https://github.com/rswag/rswag#dry-run-option Rake :: Task [ 'rswag:specs:swaggerize' ]. invoke # ^ call the actual rswag rake task end end end Create a new spec file for your Rswag specs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 # /modules/appeals_api/spec/docs/v2/hlr_spec.rb require 'swagger_helper' # ^ standard Rswag helper require Rails . root . join ( 'spec' , 'rswag_override.rb' ) . to_s # ^ Rswag overrides to allow for multiple body examples and only writing out relevant swagger json (instead of writing all swagger json files out every time Rswag is run). require 'rails_helper' describe 'Higher-Level Reviews' , swagger_doc : 'modules/appeals_api/app/swagger/appeals_api/v2/swagger.json' , type : :request do # ^ this path needs to match one of the paths from your Rswag config # ^ adding 'type: :request' makes sure that RSpec knows how to properly interpret your spec if it lives outside of the 'spec/requests' path path '/higher_level_reviews/{uuid}' do # ^ this should be the actual url fragment you want Rswag to make a request to let ( :apikey ) { 'apikey' } get 'Shows a specific Higher-Level Review. (a.k.a. the Show endpoint)' do tags 'Higher-Level Reviews' # ^ Which tag(s) should this example be nested in (from the rswag config) operationId 'showHlr' # ^ unique Id that will be used by the swagger UI security [ { apikey : [] } ] # ^ relevant security schemes (from Rswag config) consumes 'application/json' produces 'application/json' parameter name : :uuid , in : :path , type : :string , description : 'Higher-Level Review UUID' # ^ name's value is important - it will be set by its value in the 'response' section response '200' , 'Info about a single Higher-Level Review' do schema type : :object , properties : { data : { properties : { id : { type : :string , pattern : '^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$' }, type : { type : :string , enum : [ 'higherLevelReview' ] }, attributes : { properties : { status : { type : :string , example : AppealsApi :: HlrStatus :: V2_STATUSES . first , enum : AppealsApi :: HlrStatus :: V2_STATUSES }, updatedAt : { type : :string , pattern : '\\d{4}(-\\d{2}){2}T\\d{2}(:\\d{2}){2}\\.\\d{3}Z' }, createdAt : { type : :string , pattern : '\\d{4}(-\\d{2}){2}T\\d{2}(:\\d{2}){2}\\.\\d{3}Z' }, formData : { '$ref' => '#/components/schemas/hlrCreate' } } } }, required : %w[id type attributes] } }, required : [ 'data' ] # schemas can be defined several ways: # inline (as shown above): # schema type: :object, ... # referenced from the Rswag config: # schema '$ref' => '#/components/schemas/errors_object' # or loaded from plain json files: # schema JSON.parse(File.read(AppealsApi::Engine.root.join('spec', 'support', 'schemas', 'errors', '404.json'))) let ( :uuid ) { FactoryBot . create ( :minimal_higher_level_review_v2 ) . id } # ^ needs to match the parameters name otherwise you'll see a No method error for 'uuid' (or whatever your parameter is called) before do | example | submit_request ( example . metadata ) # ^ makes the actual request - using the built up url (fragment and basePath) and any parameters you have supplied end it 'returns a 200 response' do | example | assert_response_matches_metadata ( example . metadata ) # ^ asserts that the respose matches the schema you have supplied end after do | example | example . metadata [ :response ][ :content ] = { 'application/json' => { example : JSON . parse ( response . body , symbolize_names : true ) # ^ saves the actual response from the 'submit_request(example.metadata)' call in the before action } } end end response '404' , 'Higher-Level Review not found' do schema JSON . parse ( File . read ( AppealsApi :: Engine . root . join ( 'spec' , 'support' , 'schemas' , 'errors' , '404.json' ))) let ( :uuid ) { 'invalid' } before do | example | submit_request ( example . metadata ) end after do | example | example . metadata [ :response ][ :content ] = { 'application/json' => { example : JSON . parse ( response . body , symbolize_names : true ) } } end it 'returns a 404 response' do | example | assert_response_matches_metadata ( example . metadata ) end end end end end Run the custom rake task you created earlier to run Rswag and generate the swagger json file rake rswag:appeals_api:run Serve the generated swagger from your doc controller: 1 2 3 4 5 6 7 8 class AppealsApi :: Docs :: V2 :: DocsController < ApplicationController skip_before_action ( :authenticate ) def decision_reviews swagger = JSON . parse ( File . read ( AppealsApi :: Engine . root . join ( 'app/swagger/appeals_api/v2/swagger.json' ))) render json : swagger end end Misc details \u00b6 Make sure that if you are creating any resources (FactoryBot or otherwise) they happen lazily (ie inside a let , before , or it ). If you put them inside the response block (or anywhere else that gets evaluated on load) Rspec will evaluate and run them when it is loading all the files up for a suite run - and then because they were not created in the typical way they won't get cleaned up properly at the end of the spec run... This can lead to confusion if you use specific counts of that resource anywhere else in your specs. How to add multiple request bodies and responses to Rswag examples (examples truncated for brevity): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 # ... describe 'Higher-Level Reviews' , swagger_doc : 'modules/appeals_api/app/swagger/appeals_api/v2/swagger.json' , type : :request do let ( :apikey ) { 'apikey' } path '/higher_level_reviews' do post 'Creates a new Higher-Level Review' do # tags, operationId, description, etc parameter name : :hlr_body , in : :body , schema : { '$ref' => '#/components/schemas/hlrCreate' } # => ^ as stated before the value passed to the name: parameter is important as you will need to set its value later) parameter in : :body , examples : { 'minimum fields used' => { value : JSON . parse ( File . read ( AppealsApi :: Engine . root . join ( 'spec' , 'fixtures' , 'v2' , 'valid_200996_minimum.json' ))) }, 'all fields used' => { value : JSON . parse ( File . read ( AppealsApi :: Engine . root . join ( 'spec' , 'fixtures' , 'v2' , 'valid_200996.json' ))) } } # ^ the value of keys in the examples hash will be used in the request bodies drop down selector parameter in : :header , type : :string , name : 'X-VA-SSN' , required : true , description : 'Veteran \\' s SSN' let ( :'X-VA-SSN' ) { '000000000' } response '200' , 'Info about a single Higher-Level Review' do let ( :hlr_body ) do JSON . parse ( File . read ( AppealsApi :: Engine . root . join ( 'spec' , 'fixtures' , 'v2' , 'valid_200996_minimum.json' ))) end # ^ referencing the parameter named above (:hlr_body) so Rswag knows to send this json as the body of the request # schema ... before do | example | submit_request ( example . metadata ) end it 'minimum fields used' do | example | assert_response_matches_metadata ( example . metadata ) end after do | example | response_title = example . metadata [ :description ] example . metadata [ :response ][ :content ] = { 'application/json' => { examples : { \" #{ response_title } \" : { value : JSON . parse ( response . body , symbolize_names : true ) } } # ^ To have multiple responses (shown in the swagger UI via a drop down) you have to nest them under 'examples' instead of directly in 'example' # You can set the text statically here or use the examples metadata from the 'it ... do' - in this case 'minimum fields used'. Providing that you don't over write it with a subsequent example. } } end end response '200' , 'Info about a single Higher-Level Review' do let ( :hlr_body ) do JSON . parse ( File . read ( AppealsApi :: Engine . root . join ( 'spec' , 'fixtures' , 'v2' , 'valid_200996.json' ))) end # schema ... before do | example | submit_request ( example . metadata ) end it 'all fields used' do | example | assert_response_matches_metadata ( example . metadata ) end # ^ This is another '200' response but because the description is different than the above '200' example it will show up as two different possible examples in the swagger UI after do | example | response_title = example . metadata [ :description ] example . metadata [ :response ][ :content ] = { 'application/json' => { examples : { \" #{ response_title } \" : { value : JSON . parse ( response . body , symbolize_names : true ) } } } } end end end end end","title":"Rswag setup for Rails engine"},{"location":"setup/rswag_setup/#rswag-setup-for-rails-engine","text":"To create a minimal implementation of Rswag in your team's Rails engine you will need to do the following (commented lines are only for explaining what specific things do and should be removed from your specific implementation): In /spec/swagger_helper.rb add your Rails Engine's name eg AppealsApi to the config.swagger_docs section. Create your Rswag config file in your engine's spec/support dir (eg /modules/appeals_api/spec/support/rswag_config.rb ) a minimal configuration is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 # /modules/appeals_api/spec/support/rswag_config.rb class AppealsApi :: RswagConfig def config { 'modules/appeals_api/app/swagger/appeals_api/v2/swagger.json' => { # ^ This path points to wherever you would like Rswag to save the generated swagger json file. openapi : '3.0.1' , info : { title : 'Decision Reviews' , version : 'v2' , termsOfService : 'https://developer.va.gov/terms-of-service' , description : File . read ( AppealsApi :: Engine . root . join ( 'app' , 'swagger' , 'appeals_api' , 'v2' , 'api_description.md' )) # ^ You could have the description inline, but saving it as a standalone file makes it easier to edit/manage }, tags : [ { name : 'Higher-Level Reviews' , description : '' } # ^ These tags are used for grouping each individual endpoint in the swagger UI ] , components : { securitySchemes : { # ^ add your relevant security schemes here apikey : { type : :apiKey , name : :apikey , in : :header } }, schemas : { # ^ schemas that can be used across multiple Rswag specs 'nonBlankString' : { 'type' : 'string' , 'pattern' : '[^ \\\\ f \\\\ n \\\\ r \\\\ t \\\\ v \\\\ u00a0 \\\\ u1680 \\\\ u2000- \\\\ u200a \\\\ u2028 \\\\ u2029 \\\\ u202f \\\\ u205f \\\\ u3000 \\\\ ufeff]' , '$comment' : \"The pattern used ensures that a string has at least one non-whitespace character. The pattern comes from JavaScript's \\\\ s character class. \\\"\\\\ s Matches a single white space character, including space, tab, form feed, line feed, and other Unicode spaces. Equivalent to [ \\\\ f \\\\ n \\\\ r \\\\ t \\\\ v \\\\ u00a0 \\\\ u1680 \\\\ u2000- \\\\ u200a \\\\ u2028 \\\\ u2029 \\\\ u202f \\\\ u205f \\\\ u3000 \\\\ ufeff]. \\\" : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes We are using simple character classes at JSON Schema's recommendation: https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-4.3\" } } }, paths : {}, basePath : '/services/appeals/v2/decision_reviews' , # ^ basePath is used in building up the url that Rswag will use in testing servers : [ # ^ Used in creating the 'Environment' drop-down for generating example curl commands { url : 'https://dev-api.va.gov/services/appeals/{version}/decision_reviews' , description : 'VA.gov API sandbox environment' , variables : { version : { default : 'v2' } } } ] } } end end Add your engines rake task to rakelib/rswag.rake by copy and pasting the following (substituting your relevant Rails engine in): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # rakelib/rswag.rake namespace :rswag do # ... namespace :appeals_api do desc 'Generate rswag docs for appeals_api' task run : :environment do ENV [ 'PATTERN' ] = 'modules/appeals_api/spec/docs/**/*_spec.rb' # ^ specifies the path of the specs you'd like Rswag to run ENV [ 'RAILS_MODULE' ] = 'appeals_api' # ^ added to make Rswag only write out swagger json relevant to your Rails engine ENV [ 'SWAGGER_DRY_RUN' ] = '0' # ^ Turns off the dry Rswag option - https://github.com/rswag/rswag#dry-run-option Rake :: Task [ 'rswag:specs:swaggerize' ]. invoke # ^ call the actual rswag rake task end end end Create a new spec file for your Rswag specs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 # /modules/appeals_api/spec/docs/v2/hlr_spec.rb require 'swagger_helper' # ^ standard Rswag helper require Rails . root . join ( 'spec' , 'rswag_override.rb' ) . to_s # ^ Rswag overrides to allow for multiple body examples and only writing out relevant swagger json (instead of writing all swagger json files out every time Rswag is run). require 'rails_helper' describe 'Higher-Level Reviews' , swagger_doc : 'modules/appeals_api/app/swagger/appeals_api/v2/swagger.json' , type : :request do # ^ this path needs to match one of the paths from your Rswag config # ^ adding 'type: :request' makes sure that RSpec knows how to properly interpret your spec if it lives outside of the 'spec/requests' path path '/higher_level_reviews/{uuid}' do # ^ this should be the actual url fragment you want Rswag to make a request to let ( :apikey ) { 'apikey' } get 'Shows a specific Higher-Level Review. (a.k.a. the Show endpoint)' do tags 'Higher-Level Reviews' # ^ Which tag(s) should this example be nested in (from the rswag config) operationId 'showHlr' # ^ unique Id that will be used by the swagger UI security [ { apikey : [] } ] # ^ relevant security schemes (from Rswag config) consumes 'application/json' produces 'application/json' parameter name : :uuid , in : :path , type : :string , description : 'Higher-Level Review UUID' # ^ name's value is important - it will be set by its value in the 'response' section response '200' , 'Info about a single Higher-Level Review' do schema type : :object , properties : { data : { properties : { id : { type : :string , pattern : '^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$' }, type : { type : :string , enum : [ 'higherLevelReview' ] }, attributes : { properties : { status : { type : :string , example : AppealsApi :: HlrStatus :: V2_STATUSES . first , enum : AppealsApi :: HlrStatus :: V2_STATUSES }, updatedAt : { type : :string , pattern : '\\d{4}(-\\d{2}){2}T\\d{2}(:\\d{2}){2}\\.\\d{3}Z' }, createdAt : { type : :string , pattern : '\\d{4}(-\\d{2}){2}T\\d{2}(:\\d{2}){2}\\.\\d{3}Z' }, formData : { '$ref' => '#/components/schemas/hlrCreate' } } } }, required : %w[id type attributes] } }, required : [ 'data' ] # schemas can be defined several ways: # inline (as shown above): # schema type: :object, ... # referenced from the Rswag config: # schema '$ref' => '#/components/schemas/errors_object' # or loaded from plain json files: # schema JSON.parse(File.read(AppealsApi::Engine.root.join('spec', 'support', 'schemas', 'errors', '404.json'))) let ( :uuid ) { FactoryBot . create ( :minimal_higher_level_review_v2 ) . id } # ^ needs to match the parameters name otherwise you'll see a No method error for 'uuid' (or whatever your parameter is called) before do | example | submit_request ( example . metadata ) # ^ makes the actual request - using the built up url (fragment and basePath) and any parameters you have supplied end it 'returns a 200 response' do | example | assert_response_matches_metadata ( example . metadata ) # ^ asserts that the respose matches the schema you have supplied end after do | example | example . metadata [ :response ][ :content ] = { 'application/json' => { example : JSON . parse ( response . body , symbolize_names : true ) # ^ saves the actual response from the 'submit_request(example.metadata)' call in the before action } } end end response '404' , 'Higher-Level Review not found' do schema JSON . parse ( File . read ( AppealsApi :: Engine . root . join ( 'spec' , 'support' , 'schemas' , 'errors' , '404.json' ))) let ( :uuid ) { 'invalid' } before do | example | submit_request ( example . metadata ) end after do | example | example . metadata [ :response ][ :content ] = { 'application/json' => { example : JSON . parse ( response . body , symbolize_names : true ) } } end it 'returns a 404 response' do | example | assert_response_matches_metadata ( example . metadata ) end end end end end Run the custom rake task you created earlier to run Rswag and generate the swagger json file rake rswag:appeals_api:run Serve the generated swagger from your doc controller: 1 2 3 4 5 6 7 8 class AppealsApi :: Docs :: V2 :: DocsController < ApplicationController skip_before_action ( :authenticate ) def decision_reviews swagger = JSON . parse ( File . read ( AppealsApi :: Engine . root . join ( 'app/swagger/appeals_api/v2/swagger.json' ))) render json : swagger end end","title":"Rswag setup for Rails engine"},{"location":"setup/rswag_setup/#misc-details","text":"Make sure that if you are creating any resources (FactoryBot or otherwise) they happen lazily (ie inside a let , before , or it ). If you put them inside the response block (or anywhere else that gets evaluated on load) Rspec will evaluate and run them when it is loading all the files up for a suite run - and then because they were not created in the typical way they won't get cleaned up properly at the end of the spec run... This can lead to confusion if you use specific counts of that resource anywhere else in your specs. How to add multiple request bodies and responses to Rswag examples (examples truncated for brevity): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 # ... describe 'Higher-Level Reviews' , swagger_doc : 'modules/appeals_api/app/swagger/appeals_api/v2/swagger.json' , type : :request do let ( :apikey ) { 'apikey' } path '/higher_level_reviews' do post 'Creates a new Higher-Level Review' do # tags, operationId, description, etc parameter name : :hlr_body , in : :body , schema : { '$ref' => '#/components/schemas/hlrCreate' } # => ^ as stated before the value passed to the name: parameter is important as you will need to set its value later) parameter in : :body , examples : { 'minimum fields used' => { value : JSON . parse ( File . read ( AppealsApi :: Engine . root . join ( 'spec' , 'fixtures' , 'v2' , 'valid_200996_minimum.json' ))) }, 'all fields used' => { value : JSON . parse ( File . read ( AppealsApi :: Engine . root . join ( 'spec' , 'fixtures' , 'v2' , 'valid_200996.json' ))) } } # ^ the value of keys in the examples hash will be used in the request bodies drop down selector parameter in : :header , type : :string , name : 'X-VA-SSN' , required : true , description : 'Veteran \\' s SSN' let ( :'X-VA-SSN' ) { '000000000' } response '200' , 'Info about a single Higher-Level Review' do let ( :hlr_body ) do JSON . parse ( File . read ( AppealsApi :: Engine . root . join ( 'spec' , 'fixtures' , 'v2' , 'valid_200996_minimum.json' ))) end # ^ referencing the parameter named above (:hlr_body) so Rswag knows to send this json as the body of the request # schema ... before do | example | submit_request ( example . metadata ) end it 'minimum fields used' do | example | assert_response_matches_metadata ( example . metadata ) end after do | example | response_title = example . metadata [ :description ] example . metadata [ :response ][ :content ] = { 'application/json' => { examples : { \" #{ response_title } \" : { value : JSON . parse ( response . body , symbolize_names : true ) } } # ^ To have multiple responses (shown in the swagger UI via a drop down) you have to nest them under 'examples' instead of directly in 'example' # You can set the text statically here or use the examples metadata from the 'it ... do' - in this case 'minimum fields used'. Providing that you don't over write it with a subsequent example. } } end end response '200' , 'Info about a single Higher-Level Review' do let ( :hlr_body ) do JSON . parse ( File . read ( AppealsApi :: Engine . root . join ( 'spec' , 'fixtures' , 'v2' , 'valid_200996.json' ))) end # schema ... before do | example | submit_request ( example . metadata ) end it 'all fields used' do | example | assert_response_matches_metadata ( example . metadata ) end # ^ This is another '200' response but because the description is different than the above '200' example it will show up as two different possible examples in the swagger UI after do | example | response_title = example . metadata [ :description ] example . metadata [ :response ][ :content ] = { 'application/json' => { examples : { \" #{ response_title } \" : { value : JSON . parse ( response . body , symbolize_names : true ) } } } } end end end end end","title":"Misc details"},{"location":"setup/running_docker/","text":"Running the app with Docker \u00b6 First make sure to follow the common base setup . A Makefile provides shortcuts for interacting with the docker images. You can see all of the targets and an explanation of what they do with: 1 make help To run vets-api and its redis and postgres dependencies run the following command from within the repo you cloned in the above steps. 1 make up You should then be able to navigate to http://localhost:3000/v0/status in your browser and start interacting with the API. Changes to the source in your local directory will be reflected automatically via a docker volume mount, just as they would be when running rails directly. The Makefile has shortcuts for many common development tasks. You can still run manual docker-compose commands , but the following tasks have been aliased to speed development: Running tests \u00b6 make spec - Run the entire test suite via the docker image (alias for rspec spec ). Test coverage statistics are in coverage/index.html . make guard - Run the guard test server that reruns your tests after files are saved. Useful for TDD! Running tests in parallel \u00b6 make spec_parallel_setup - This sets up the parallel tests databases. First the existing test database is dropped and reset, then the rest of the test databases are cloned off the standard one make spec_parallel - Run the entire test suite in parallel. A spec folder path can optionally be given as an argument to run just the spec folder in parallel Running linters \u00b6 make lint - Run the full suite of linters on the codebase. make security - Run the suite of security scanners on the codebase. make ci - Run all build steps performed in CI. Running a rails interactive console \u00b6 make console - Is an alias for rails console , which runs an IRB like REPL in which all of the API's classes and environmental variables have been loaded. Running a bash shell \u00b6 To emulate a local install's workflow where you can run rspec , rake , or rails commands directly within the vets-api docker instance you can use the make bash command. 1 2 3 4 5 6 $ make bash Creating network \"vetsapi_default\" with the default driver Creating vetsapi_postgres_1 ... done Creating vetsapi_redis_1 ... done # then run any command as you would locally e.g. root@63aa89d76c17:/src/vets-api# rspec spec/requests/user_request_spec.rb:26 Troubleshooting \u00b6 As a general technique, if you're running vets-api in Docker and run into a problem, doing a make rebuild is a good first step to fix configuration, gem, and other various code problems. make up fails with a message about missing gems \u00b6 1 2 Could not find %SOME_GEM_v0.0.1% in any of the sources Run ` bundle install ` to install missing gems. There is no need to run bundle install on your system to resolve this. A rebuild of the vets_api image will update the gems. The vets_api docker image installs gems when the image is built, rather than mounting them into a container when it is run. This means that any time gems are updated in the Gemfile or Gemfile.lock, it may be necessary to rebuild the vets_api image using the following command: make down - Stops all docker services. make rebuild - Rebuild the vets_api image. make docker-clean - Removes all docker images and volumes associated with vets-api.","title":"Running the app with Docker"},{"location":"setup/running_docker/#running-the-app-with-docker","text":"First make sure to follow the common base setup . A Makefile provides shortcuts for interacting with the docker images. You can see all of the targets and an explanation of what they do with: 1 make help To run vets-api and its redis and postgres dependencies run the following command from within the repo you cloned in the above steps. 1 make up You should then be able to navigate to http://localhost:3000/v0/status in your browser and start interacting with the API. Changes to the source in your local directory will be reflected automatically via a docker volume mount, just as they would be when running rails directly. The Makefile has shortcuts for many common development tasks. You can still run manual docker-compose commands , but the following tasks have been aliased to speed development:","title":"Running the app with Docker"},{"location":"setup/running_docker/#running-tests","text":"make spec - Run the entire test suite via the docker image (alias for rspec spec ). Test coverage statistics are in coverage/index.html . make guard - Run the guard test server that reruns your tests after files are saved. Useful for TDD!","title":"Running tests"},{"location":"setup/running_docker/#running-tests-in-parallel","text":"make spec_parallel_setup - This sets up the parallel tests databases. First the existing test database is dropped and reset, then the rest of the test databases are cloned off the standard one make spec_parallel - Run the entire test suite in parallel. A spec folder path can optionally be given as an argument to run just the spec folder in parallel","title":"Running tests in parallel"},{"location":"setup/running_docker/#running-linters","text":"make lint - Run the full suite of linters on the codebase. make security - Run the suite of security scanners on the codebase. make ci - Run all build steps performed in CI.","title":"Running linters"},{"location":"setup/running_docker/#running-a-rails-interactive-console","text":"make console - Is an alias for rails console , which runs an IRB like REPL in which all of the API's classes and environmental variables have been loaded.","title":"Running a rails interactive console"},{"location":"setup/running_docker/#running-a-bash-shell","text":"To emulate a local install's workflow where you can run rspec , rake , or rails commands directly within the vets-api docker instance you can use the make bash command. 1 2 3 4 5 6 $ make bash Creating network \"vetsapi_default\" with the default driver Creating vetsapi_postgres_1 ... done Creating vetsapi_redis_1 ... done # then run any command as you would locally e.g. root@63aa89d76c17:/src/vets-api# rspec spec/requests/user_request_spec.rb:26","title":"Running a bash shell"},{"location":"setup/running_docker/#troubleshooting","text":"As a general technique, if you're running vets-api in Docker and run into a problem, doing a make rebuild is a good first step to fix configuration, gem, and other various code problems.","title":"Troubleshooting"},{"location":"setup/running_docker/#make-up-fails-with-a-message-about-missing-gems","text":"1 2 Could not find %SOME_GEM_v0.0.1% in any of the sources Run ` bundle install ` to install missing gems. There is no need to run bundle install on your system to resolve this. A rebuild of the vets_api image will update the gems. The vets_api docker image installs gems when the image is built, rather than mounting them into a container when it is run. This means that any time gems are updated in the Gemfile or Gemfile.lock, it may be necessary to rebuild the vets_api image using the following command: make down - Stops all docker services. make rebuild - Rebuild the vets_api image. make docker-clean - Removes all docker images and volumes associated with vets-api.","title":"make up fails with a message about missing gems"},{"location":"setup/running_natively/","text":"Running the app Natively \u00b6 To run vets-api and its redis and postgres dependencies run the following command from within the repo you cloned in the above steps. 1 foreman start -m all=1,clamd=0,freshclam=0 You should then be able to navigate to http://localhost:3000/v0/status in your browser and start interacting with the API. Changes to the source in your local directory will be reflected automatically via a docker volume mount, just as they would be when running rails directly. Running tests \u00b6 bundle exec rake spec - Run the entire test suite ( for rspec spec ). Test coverage statistics are in coverage/index.html . make guard - Run the guard test server that reruns your tests after files are saved. Useful for TDD! Running tests in parallel \u00b6 NOTE: Running specs in parallel requires that your development database exists, and is up to date. If necessary, you may need to run bundle exec rake db:create and bundle exec rake db:migrate before the following steps. RAILS_ENV=test bundle exec rake parallel:setup - This prepares all of the test databases. It will create a test database for each processor on your computer. RAILS_ENV=test NOCOVERAGE=true bundle exec rake parallel:spec - This runs the entire test suite. Optionally, a folder path can be given as a parameter. Each file is assigned a processor, so it probably doesn't make sense to pass an individual file to run it in parallel. It is currently suggested to forgo the coverage testing by adding NOCOVERAGE=true flag (currently the coverage check will fail, even if the test suite passes). If you would like to check coverage for the test run, remove that flag. Running linters \u00b6 rake lint - Run the full suite of linters on the codebase and autocorrect. rake security - Run the suite of security scanners on the codebase. rake ci - Run all build steps performed in CI. Running a rails interactive console \u00b6 rails console - runs an IRB like REPL in which all of the API's classes and environmental variables have been loaded.","title":"Running the app Natively"},{"location":"setup/running_natively/#running-the-app-natively","text":"To run vets-api and its redis and postgres dependencies run the following command from within the repo you cloned in the above steps. 1 foreman start -m all=1,clamd=0,freshclam=0 You should then be able to navigate to http://localhost:3000/v0/status in your browser and start interacting with the API. Changes to the source in your local directory will be reflected automatically via a docker volume mount, just as they would be when running rails directly.","title":"Running the app Natively"},{"location":"setup/running_natively/#running-tests","text":"bundle exec rake spec - Run the entire test suite ( for rspec spec ). Test coverage statistics are in coverage/index.html . make guard - Run the guard test server that reruns your tests after files are saved. Useful for TDD!","title":"Running tests"},{"location":"setup/running_natively/#running-tests-in-parallel","text":"NOTE: Running specs in parallel requires that your development database exists, and is up to date. If necessary, you may need to run bundle exec rake db:create and bundle exec rake db:migrate before the following steps. RAILS_ENV=test bundle exec rake parallel:setup - This prepares all of the test databases. It will create a test database for each processor on your computer. RAILS_ENV=test NOCOVERAGE=true bundle exec rake parallel:spec - This runs the entire test suite. Optionally, a folder path can be given as a parameter. Each file is assigned a processor, so it probably doesn't make sense to pass an individual file to run it in parallel. It is currently suggested to forgo the coverage testing by adding NOCOVERAGE=true flag (currently the coverage check will fail, even if the test suite passes). If you would like to check coverage for the test run, remove that flag.","title":"Running tests in parallel"},{"location":"setup/running_natively/#running-linters","text":"rake lint - Run the full suite of linters on the codebase and autocorrect. rake security - Run the suite of security scanners on the codebase. rake ci - Run all build steps performed in CI.","title":"Running linters"},{"location":"setup/running_natively/#running-a-rails-interactive-console","text":"rails console - runs an IRB like REPL in which all of the API's classes and environmental variables have been loaded.","title":"Running a rails interactive console"},{"location":"setup/virtual_machine_access/","text":"Virtual Machine Access \u00b6 These changes will work for accessing a local deploy from within in a virtual machine. Find the IP of the host machine from inside the VM. For VirtualBox this tends to be 10.0.2.2 . Run vets-website In settings.local.yml 1. Add http://10.0.2.2:3000 and http://10.0.2.2:3001 to web_origin 1. Add \"10.0.2.2\" to virtual_hosts 1. Set virual_host_localhost to 10.0.2.2 1 2 3 4 5 # For CORS requests; separate multiple origins with a comma web_origin: http://10.0.2.2:3000, http://10.0.2.2:3001 virtual_hosts: [\"127.0.0.1\", \"localhost\", \"10.0.2.2\"] virtual_host_localhost: 10.0.2.2 1. Make sure to rebuild vets-api before starting 1 2 make rebuild; make up; Make sure the VM can correctly access the host machine running vets-website and vets-api VirtualBox Make sure the OS can correctly access the host machine running vets-website and vets-api Windows From within the VM go to 10.0.2.2:3001 Additional Virtual Machine Configurations \u00b6 VirtualBox \u00b6 VirtualBox has an issue with changing Promiscuous Mode . In the virtual machine settings. Make the network configuration of your virtual machine look like below In order to change Promiscuous Mode 1. Change Attached to to Bridged Adapter , this allows Promiscuous Mode to be changed. 1. Change Promiscuous Mode to \"Allow All\" 1. Change Attached to to \"NAT\" 1. Click OK Windows \u00b6 Access Internet Options > Security > Custom Level... Change Access data sources across domains to Enable-ON","title":"Virtual Machine Access"},{"location":"setup/virtual_machine_access/#virtual-machine-access","text":"These changes will work for accessing a local deploy from within in a virtual machine. Find the IP of the host machine from inside the VM. For VirtualBox this tends to be 10.0.2.2 . Run vets-website In settings.local.yml 1. Add http://10.0.2.2:3000 and http://10.0.2.2:3001 to web_origin 1. Add \"10.0.2.2\" to virtual_hosts 1. Set virual_host_localhost to 10.0.2.2 1 2 3 4 5 # For CORS requests; separate multiple origins with a comma web_origin: http://10.0.2.2:3000, http://10.0.2.2:3001 virtual_hosts: [\"127.0.0.1\", \"localhost\", \"10.0.2.2\"] virtual_host_localhost: 10.0.2.2 1. Make sure to rebuild vets-api before starting 1 2 make rebuild; make up; Make sure the VM can correctly access the host machine running vets-website and vets-api VirtualBox Make sure the OS can correctly access the host machine running vets-website and vets-api Windows From within the VM go to 10.0.2.2:3001","title":"Virtual Machine Access"},{"location":"setup/virtual_machine_access/#additional-virtual-machine-configurations","text":"","title":"Additional Virtual Machine Configurations"},{"location":"setup/virtual_machine_access/#virtualbox","text":"VirtualBox has an issue with changing Promiscuous Mode . In the virtual machine settings. Make the network configuration of your virtual machine look like below In order to change Promiscuous Mode 1. Change Attached to to Bridged Adapter , this allows Promiscuous Mode to be changed. 1. Change Promiscuous Mode to \"Allow All\" 1. Change Attached to to \"NAT\" 1. Click OK","title":"VirtualBox"},{"location":"setup/virtual_machine_access/#windows","text":"Access Internet Options > Security > Custom Level... Change Access data sources across domains to Enable-ON","title":"Windows"}]}